apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: waarp-r66
    app: waarp-r66
    tiers: waarp-r66
  name: waarp-r66
spec:
  ports:
  - name: "xfer"
    port: 6666
    targetPort: 6666
  - name: "xferssl"
    port: 6667
    targetPort: 6667
  - name: "monwebui"
    port: 8066
    targetPort: 8066
  - name: "adminwebui"
    port: 8067
    targetPort: 8067
  - name: "apissl"
    port: 8088
    targetPort: 8088
  selector:
    io.kompose.service: waarp-r66
  type: NodePort
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: waarp-site1-etc
    app: waarp-r66
  name: waarp-site1-etc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 80Mi
  selector:
    matchLabels:
      io.kompose.service: waarp-site1-etc
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: waarp-site1-data
    app: waarp-r66
  name: waarp-site1-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      io.kompose.service: waarp-site1-data
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: waarp-site1-log
    app: waarp-r66
  name: waarp-site1-log
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  selector:
    matchLabels:
      io.kompose.service: waarp-site1-log
status: {}
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  name: waarp-r66
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: waarp-r66
        app: waarp-r66
    spec:
      containers:
      - image: fjudith/waarp-r66:3.0.8
        name: waarp-r66
        env:
        - name: WAARP_APPNAME
          value: site1
        # $ kubectl create secret generic waarp-r66-pass --from-file=waarp-r66.password.txt
        # make sure waarp-r66.password.txt does not have a trailing newline
        - name: WAARP_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: waarp-r66-pass
              key: waarp-r66.password.txt
        - name: WAARP_DATABASE_TYPE
          value: postgresql
        - name: WAARP_DATABASE_NAME
          value: site1-waarp
        - name: WAARP_DATABASE_USER
          value: waarp
        # $ kubectl create secret generic postgres-pass --from-file=postgres.password.txt
        # make sure postgres.password.txt does not have a trailing newline
        - name: WAARP_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-pass
              key: postgres.password.txt
        - name: WAARP_DATABASE_URL
          value: jdbc:postgresql://waarp-r66-pg:5432/site1-waarp
        ports:
        - containerPort: 6666
          name: xfer
        - containerPort: 6667
          name: xferssl
        - containerPort: 8066
          name: monwebui
        - containerPort: 8067
          name: adminwebui
        - containerPort: 8088
          name: apissl
        volumeMounts:
        - mountPath: /etc/waarp
          name: waarp-site1-etc
          subPath: etc
        - mountPath: /var/lib/waarp
          name: waarp-site1-data
          subPath: data
        - mountPath: /var/log/waarp
          name: waarp-site1-log
          subPath: log
      volumes:
      - name: waarp-site1-etc
        persistentVolumeClaim:
          claimName: waarp-site1-etc
      - name: waarp-site1-data
        persistentVolumeClaim:
          claimName: waarp-site1-data
      - name: waarp-site1-log
        persistentVolumeClaim:
          claimName: waarp-site1-log
status: {}
