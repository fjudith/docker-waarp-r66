#!/bin/bash

# $0: script name
# $1: command
# $2...n: opts

R66_TYPE=client
if [[ -e "/etc/waarp/conf.d/$1/$R66_TYPE.xml" ]]; then
    R66_INST=$1
    shift
fi

source /usr/share/waarp/variables.sh


function usage {
    cat << EOT
usage: $0 command options

This script controls Waarp R66 client.
given options will be fed to Waarp.

Available commands:

    send           Sends a file to the server
    asend          Submits an asynchronous transfer
    msend          Sends multiple files to the server
    masend         Submits multiple asynchronous transfers
    spool          Watches a directory to send files created there
    gui            Starts the GUI transfer tool
    getinfo        Gets information of files on remote hosts
    transfer       Gets information about a transfer.
                   Gives the possibility to restart/stop/cancel it.
    initdb         Initialize the database
    loadconf       Loads the configuration in database
    log-export     Exports transfer history
    config-export  Exports configuration
    help           Displays this message
EOT
}

CLIENTCONF=${CONFDIR}/client.xml
AUTHENTCONF=${CONFDIR}/authent-client.xml
RULESDIR=${CONFDIR}

function r66_send {
    ${JAVARUNCLIENT} org.waarp.openr66.client.DirectTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_asend {
    ${JAVARUNCLIENT} org.waarp.openr66.client.SubmitTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_msend {
    ${JAVARUNCLIENT} org.waarp.openr66.client.MultipleDirectTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_masend {
    ${JAVARUNCLIENT} org.waarp.openr66.client.MultipleSubmitTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_spool {
    ${JAVARUNCLIENT} org.waarp.openr66.client.SpooledDirectoryTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_gui {
    ${JAVARUNCLIENT} org.waarp.openr66.r66gui.R66ClientGui ${CLIENTCONF} "$@"
    return $?
}

function r66_getinfo {
    ${JAVARUNCLIENT} org.waarp.openr66.client.RequestInformation ${CLIENTCONF} "$@"
    return $?
}

function r66_transfer {
    ${JAVARUNCLIENT} org.waarp.openr66.client.RequestTransfer ${CLIENTCONF} "$@"
    return $?
}

function r66_initdb {
    output=$($JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${CLIENTCONF} -initdb)
    retval=$?

    if [[ "$output" == *"SQL Exception"* ]]; then
        retval=2
    fi

    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        return $retval
    fi
}

function r66_loadauth {
    echo -n "Loading authentication information... "
    output=`$JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${CLIENTCONF} -auth $1`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        return 1
    fi
}

function r66_loadrule {
    echo -n "Loading rule information... "
    output=`$JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${CLIENTCONF} -dir $1`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        return 1
    fi
}

function r66_loadlimit {
    echo -n "Loading bandwidth limit information... "
    output=`$JAVARUNCLI org.waarp.openr66.server.ServerInitDatabase ${CLIENTCONF} -limit $1`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        return 1
    fi
}

function r66_loadconf {
    echo "Loading configuration in database... "
    r66_loadauth ${AUTHENTCONF}
    (( $? )) && return 1
    r66_loadrule ${RULESDIR}
    (( $? )) && return 1
    return 0
}

function r66_logexport {
    echo -n "Exporting transfer history... "
    output=`$JAVARUNCLIENT org.waarp.openr66.server.LogExport ${CLIENTCONF} "$@"`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        echo -e "$output" >&2
        return 1
    fi
}

function r66_configexport {
    echo -n "Exporting configuration... "
    $JAVARUNCLIENT org.waarp.openr66.server.ConfigExport ${CLIENTCONF} "$@"
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        return 1
    fi
}

ACTION=$1
shift

case $ACTION in
    send)
        r66_send "$@"
        ;;
    asend)
        r66_asend "$@"
        ;;
    msend)
        r66_msend "$@"
        ;;
    masend)
        r66_masend "$@"
        ;;
    spool)
        r66_spool "$@"
        ;;
    gui)
        r66_gui "$@"
        ;;
    getinfo)
        r66_getinfo "$@"
        ;;
    transfer)
        r66_transfer "$@"
        ;;
    initdb)
        r66_initdb
        ;;
    loadconf)
        r66_loadconf
        ;;
    log-export)
        r66_logexport "$@"
        ;;
    config-export)
        r66_configexport "$@"
        ;;
    *)
        usage
        ;;
esac
