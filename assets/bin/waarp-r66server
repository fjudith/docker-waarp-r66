#!/bin/bash

# $0: script name
# $1: command
# $2...n: opts

R66_TYPE=server
if [[ -e "/etc/waarp/conf.d/$1/$R66_TYPE.xml" ]]; then
    R66_INST=$1
    shift
fi

source /usr/share/waarp/variables.sh


function usage {
    cat << EOT
usage: $0 command options

This script controls Waarp R66 server.
given options will be fed to Waarp.

Available commands:

    start       Starts the server
    initdb      Initialize the database
    loadconf    Loads the configuration in database
    help        Displays this message
EOT
}

PIDFILE=${PIDFILE:-${R66HOME}/var/log/r66server.pid}
PID=`cat $PIDFILE 2> /dev/null`

CONFDIR=${CONFDIR:-${BINDIR}/../etc}
SERVERCONF=${CONFDIR}/server.xml
AUTHENTCONF=${CONFDIR}/authent-server.xml
RULESDIR=${CONFDIR}



function r66_start {
    if [[ $WAARP_SERVICE = 1 ]]; then
        $JAVARUNSERVER org.waarp.openr66.server.R66Server ${SERVERCONF} >&- 2>&- &
    else
        $JAVARUNSERVER org.waarp.openr66.server.R66Server ${SERVERCONF}
    fi
    retval=$?
    pid=$!

    if [[ $WAARP_SERVICE = 1 && $retval = 0 ]]; then
        for i in $(seq 1 60); do
            listening=$(lsof -p $pid  | grep LISTEN|wc -l)
            if [[ $listening -gt 0 ]]; then
                if [ -w $(dirname $PIDFILE) ]; then
                    echo $pid > $PIDFILE
                fi
                return 0
            fi
            sleep 1
        done
        return 1
    fi

    return $retval
}

function r66_initdb {
    echo -n "Initializing database... "
    output=$($JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${SERVERCONF} -initdb)
    retval=$?

    if [[ "$output" == *"SQL Exception"* ]]; then
        retval=2
    fi

    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        echo -e "$output"
        return $retval
    fi
}

function r66_loadauth {
    echo -n "Loading authentication information... "
    output=`$JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${SERVERCONF} -auth $1`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        echo -e "$output" >&2
        return 1
    fi
}

function r66_loadrule {
    echo -n "Loading rule information... "
    output=`$JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${SERVERCONF} -dir $1`
    retval=$?
    if (( ! $retval ))
    then
        echo "done"
        return 0
    else
        echo "*** ERROR ***"
        echo -e "$output" >&2
        return 1
    fi
}

# function r66_loadlimit {
#     echo -n "Loading bandwidth limit information... "
#     output=`$JAVARUNCLIENT org.waarp.openr66.server.ServerInitDatabase ${SERVERCONF} -limit $1`
#     retval=$?
#     if (( ! $retval ))
#     then
#         echo "done"
#         return 0
#     else
#         echo "*** ERROR ***"
#         echo "See error details in $PATHLOG."
#         return 1
#     fi
# }

function r66_loadconf {
    echo "Loading configuration in database... "
    r66_loadauth ${AUTHENTCONF}
    (( $? )) && return 1
    r66_loadrule ${RULESDIR}
    (( $? )) && return 1
    return 0
}

action=$1
shift
case $action in
    start)
        r66_start
        ;;
    initdb)
        r66_initdb
        ;;
    loadconf)
        r66_loadconf
        ;;
    loadauth)
        r66_loadauth "$@"
        ;;
    loadrule)
        r66_loadrule "$@"
        ;;
    *)
        usage
        ;;
esac
